stages:
  - lint
  - document
  - build
  - test
  - release
  - deploy


include:
  - project: 'labs/salt-automation'
    file:
      - '/gitlab-ci-templates/common/rules.v1.yml'
      - '/gitlab-ci-templates/common/saltbert.v1.yml'
      - '/gitlab-ci-templates/common/config-updater-meta.v1.yml'


variables:
  IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  IMAGE_DEV: magentaaps/ressourcerenter:dev
  IMAGE_TAG: magentaaps/ressourcerenter:${CI_COMMIT_TAG}


# Lint stage
#############
.lint-default:
  stage: lint
  needs: []
  image: python:3.8

Lint Python:
  extends:
    - .lint-default
  before_script:
    - pip3 install flake8
    - pip3 install black
  script:
    - flake8 --ignore E501,E226,W503 ressourcerenter
    - black --check --diff --exclude=migrations ressourcerenter/

Lint Dockerfiles:
  extends:
    - .lint-default
  image: hadolint/hadolint:latest-debian
  script:
    - hadolint $CI_PROJECT_DIR/docker/Dockerfile

Lint REUSE compliance:
  extends: .lint-default
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint

# Build stage
#############

Build ressourcerenter image:
  stage: build
  needs: []
  dependencies: []
  image:
    name: gcr.io/kaniko-project/executor:debug-v0.16.0
    entrypoint: [""]
  script:
    # Login to GitLab registry
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/docker/Dockerfile
      --destination=${IMAGE_SHA}

# Test stage
############
.test-default:
  stage: test
  dependencies: []

Unittest:
  extends:
    - .test-default
  needs:
    - Build ressourcerenter image
  image: ${IMAGE_SHA}
  services:
    - name: postgres:13
      alias: ressourcerenter-db
  variables:
    DJANGO_SECRET_KEY: e$s6@0(hs5ja79-&!l7vt^onoe4h^*bv_e4hj&wt5^8*&x76-$
    DJANGO_TIMEZONE: Europe/Copenhagen
    POSTGRES_USER: ressourcerenter
    POSTGRES_PASSWORD: ressourcerenter
    POSTGRES_DB: ressourcerenter
    POSTGRES_HOST: ressourcerenter-db
    DJANGO_LANGUAGE_COOKIE_DOMAIN: localhost
    # No fiddling with sftp server during testing
    LOGIN_MOCK: cvr
    PRISME_PUSH_MOCK: "true"
    PITU_MOCK: "true"
    SAML_ENABLED: "true"
    SAML_SP_ENTITY_ID: http://localhost:8000/saml/metadata/
    SAML_SP_LOGIN_CALLBACK_URI: http://localhost:8000/login/callback
    SAML_SP_LOGOUT_CALLBACK_URI: http://localhost:8000/logout/callback/
    SAML_SP_CERTIFICATE: /ssl/sp/selfsigned.crt
    SAML_SP_KEY: /ssl/sp/selfsigned.key
    SAML_IDP_ENTITY_ID: http://localhost:8080/simplesaml/saml2/idp/metadata.php
    SAML_IDP_LOGIN_URI: http://localhost:8080/simplesaml/saml2/idp/SSOService.php
    SAML_IDP_LOGOUT_URI: http://localhost:8080/simplesaml/saml2/idp/SingleLogoutService.php
    SAML_IDP_CERTIFICATE: /ssl/idp/selfsigned.crt
    SAML_IDP_METADATA: http://localhost:8080/simplesaml/saml2/idp/metadata.php
    SAML_CONTACT_TECHNICAL_NAME: Tester
    SAML_CONTACT_TECHNICAL_EMAIL: test@example.com
    SAML_CONTACT_SUPPORT_NAME: Tester
    SAML_CONTACT_SUPPORT_EMAIL: test@example.com
    SKIP_IDP_METADATA: "true"
    GENERATE_DB_DOCUMENTATION: "false"
  script:
    - cd /app && python manage.py test

# Documentation stage
#####################

Generate documentation:
  stage: document
  needs: []
  image:
    name: pandoc/latex
    entrypoint: ["/bin/sh", "-c"]
  script:
    - cd manual
    - pandoc manual.md -V geometry:margin=30mm --output=administration-manual.pdf
  artifacts:
    paths:
      - manual/administration-manual.pdf


# Release stage
###############

Release image:
  stage: release
  image: alpine
  needs: ["Unittest"]
  variables:
    GIT_STRATEGY: none # We do not need the source code
  dependencies: []
  extends:
    - .rules:semver-all
  before_script:
    - apk add skopeo
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${$CI_REGISTRY_PASSWORD}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_TAG}"


# Deploy stage
##############

Configure test:
  stage: deploy
  extends:
    - .rules:semver-all
    - .config:endpoint-with-tag
  needs: ["Release image"]
  variables:
    # Matches routing in config-updater/config_updater/ressourcerenter/main.py in salt repo
    ENDPOINT: ressourcerenter/salt/update-test


Configure production:
  stage: deploy
  extends:
    - .rules:semver-core
    - .config:endpoint-with-tag
  needs: ["Release image"]
  variables:
    # Matches routing in config-updater/config_updater/ressourcerenter/main.py in salt repo
    ENDPOINT: ressourcerenter/salt/update-production


Deploy test:
  stage: deploy
  when: manual
  extends:
    - .saltbert
    - .rules:semver-all
  variables:
    SALTBERT_ORCHESTRATION: groenland.ressourcerenter.service-test
    SALTBERT_URL: https://saltmaster.groenland.magentahosted.dk
  needs: ["Release image", "Configure test"]
  environment:
    name: test
    url: "https://test.aalisakkat.aka.sullissivik.gl"


Deploy production:
  stage: deploy
  when: manual
  extends:
    - .saltbert
    - .rules:semver-core
  variables:
    SALTBERT_ORCHESTRATION: groenland.ressourcerenter.service-prod
    SALTBERT_URL: https://saltmaster.groenland.magentahosted.dk
  needs: ["Release image", "Configure production"]
  environment:
    name: production
    url: "https://aalisakkat.aka.sullissivik.gl"
